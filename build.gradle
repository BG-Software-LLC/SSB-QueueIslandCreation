plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

group 'SSB-QueueIslandCreation'
version = "2023.1"

project.ext {
    targetFolder = file("target/")
    buildVersion = System.getenv("BUILD_NUMBER") == null ? version : version + "-b" + System.getenv("BUILD_NUMBER")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/api/' }
        maven { url 'https://repo.bg-software.com/repository/common/' }
        maven { url 'https://repo.bg-software.com/repository/dependencies/' }
    }

    dependencies {
        compileOnly "com.bgsoftware.common.reflection:ReflectionUtils:1.0.2"
    }

    task checkDebug() {
        Set<File> filesWithDebug = fileTree('src/main/java').filter { file ->
            file.text.contains('Bukkit.broadcastMessage')
        }.getFiles()

        if (!filesWithDebug.isEmpty())
            throw new GradleException("Found debug messages: " + filesWithDebug)
    }

    build {
        dependsOn checkDebug
        dependsOn shadowJar
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'com.bgsoftware:SuperiorSkyblockAPI:2023.1'

    compileOnly "com.bgsoftware.common.reflection:ReflectionUtils:1.0.2"
    compileOnly "com.bgsoftware.common.config:CommentedConfiguration:1.0.3"

    // Spigot jars
    compileOnly 'org.spigotmc:v1_16_R3-Tuinity:latest'
}

shadowJar {
    dependsOn(jar)

    archiveFileName = rootProject.name + "-" + rootProject.buildVersion + ".jar"

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    exclude '*exclude.jar'

    destinationDirectory = rootProject.targetFolder
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

build {
    dependsOn shadowJar
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build